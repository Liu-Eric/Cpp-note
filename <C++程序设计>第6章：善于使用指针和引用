6.1 什么是指针
如果在程序中设置了变量，在编译时就会按照类型分配一定长度的内存单元，内存区每一个单元都有一个编号，就是地址。
其实程序经过编译以后已经将变量名转为变量地址，对变量值的存取都是通过地址进行的。
这个按变量地址存取变量值的方式称为直接存取，或直接访问。
还有一种间接存的的方式，将变量的地址存放在另一个变量中，即定义一个特殊的变量，专门用来存放地址。
&是取址运算符，&i是获取变量i的地址。
一个变量的地址称为变量的指针，如果一个变量专门用来存放指针的，则称它为指针变量。
如果一个变量专门用来存放地址，则称它为指针变量。

6.2 变量与指针
变量的地址就是变量的指针，用来存放指针的变量就是指针变量。
‘*’表示指向，i_point是一个指针变量，*i_point表示其指向的对象。
每一个指针变量分配4个字节空间。
变量的类型称为指针变量的基类型
指针变量的定义方式： 基类型 * 指针变量名
一个变量的指针包含两个信息，存储单元的开始地址和存储空间的长度，即基类型。
指针变量不可以用整数赋值，只可以用变量地址赋值。
指针只能指向同类型的变量。
对于需要改变值的函数，通过指针可以修改指向变量的值，形参永远不会改变实参。调用函数不会改变指针变量的值，但可以改变指针变量指向的值。
虚实结合是采取单向的值传递方式，只能把实参的值传给形参，不能把形参的值传给实参。
调用函数时不会改变指针参数的值（不会改变地址），可以改变地址指向的值。

6.3 数组与指针
数组的指针就是指向数组元素的指针，一般是第一个元素。
数组名代表数组第一个元素的地址。
如果指针变量p已经指向数组一个元素，则p+1指向数组下一个元素。
数组名后的方括号[]，实际上是取址运算符，对a[i]的求解过程是：先按a+i*d计算数组元素的地址，然后取出改地址指向的值。
以数组名称做为函数形参，func(int array[])，在调用过程中，并不存在一个占有内存空间的形参数组，而是接受实参数组的地址，形参和实参指向相同的内存单元，可以改变实参的值。

6.4 字符串与指针
定义一个字符串数组： char str_name[] = 'XXXX'
定义一个字符串变量： string str_name = 'xxx'
用一个字符指针指向字符串 char * str = 'xxx'，实际上是把字符串第一个指针赋给str，系统先输出第一个字符，在+1输出第二个字符，知道'\0'结束。

6.5 函数与指针
函数的入口地址称为函数的指针，可以用一个指针指向函数，然后通过该指针变量调用函数。
函数类型 （*变量名）（形参表），如果写成：函数类型 * 函数名（形参表），则相当于声明一个返回指针的函数。

6.7 指针数组
一个数组其元素均为指针的的数组称为指针数组
类型名 *数组名[数组长度]
指向指针的指针 类型名 *（*p) 

6.8 const指针
指向常量的指针变量：const 类型名 * 指针变量名，不允许通过指针改变指向变量的值，指针的值即指向对象可以改变。
指向常量的指针限制通过指针改变对象的值，对象的值本身可以改变。
指向常变量的指针变量，变量声明为const，既不可以通过变量本身也不可以通过指针来修该变量。









