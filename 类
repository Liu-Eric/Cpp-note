===================================构造函数=====================================
构造函数
利用构造函数对类对象初始化
如果一个类的对象都是公有对象，可以通过class obj = {x,x,x}的形式赋值。
c++提供构造函数来处理对象初始化，构造函数是特殊的成员函数，与类名同名，没有返回值，在类对象创建时主动调用，不可以人为调用。
可以通过一个类对象初始化另一个类对象，class obj2 = obj1
如果没有定义构造函数，c++会自动定义一个默认构造函数，函数体为空。
构造函数声明定义：
class Box:
  {public:
    Box(int h, int w, int l):hight(h), weight(w), lenght(l){}; #使用参数化列表创建构造函数，也可以写在普通函数体中
    Box(int h, int w, int l = 10):hight(h), weight(w), lenght(l){}; #带默认参数的构造函数
  private:
    int height;
    int wight;
    int lenght;
#不需要参数的构造函数称为默认构造函数，默认构造函数只能有一个。
#如果有数据成员为数组，则不能用参数化列表的方式，必须在构建函数函数体内赋值。
#构造函数可以通过重载的方式建立不同赋值情况的构造函数。
#默认参数需要在函数声明时定义
===================================析构函数=====================================
在对象的生命期结束时，会自动调用析构函数，析构函数并不删除对象或者释放内存空间，而是在这些之前完成一些清理工作，执行用户在最后一次使用对象之后所希望执行的操作。
析构函数没有返回值，返回类型，没有参数，不能被重载，智能有一个析构函数。
如果没有定义一个析构函数，C++会自动顶一个默认析构函数，函数体为空。
析构函数调用的四种情况：
1.函数内对象在函数函数执行完成后。
2.函数内static对象在主程序完成后。
3.全局对象在主程序完成后。
4.通过new创建的对象在delete后。
在同一作用域范围内，析构函数的调用顺序与构造函数相反。
===================================类对象数据=====================================
创建方式class_name list_name [x]
初始化方式：
class l [3]  = {class(x,x,x), class(y,y,y), class(z,z,z)}
===================================对象指针=====================================
对象指针就是指向类对象的指针，定义形式为：类名 * 对象指针名。
通过对象指针访问对象和对象成员：
* pt/ (*pt.attr) / pt->attr/ (*pt).func() / pt->func()
指向对象数据成员的指针（公有数据对象） 定义形式为； 数据类型名 * 指针名
指向成员函数的指针 定义形式： 数据类型名（类名：：*指针名）（参数列表），赋值方式：指针名 = &类名：：成员函数
在每一个成员函数中都包含一个特殊的指针，指针名称是固定的：this，它是指向本类对象的指针，它的值是当前被调用的成员函数所在类对象的起始地址。
成员函数不存放在类对象的空间中，而存放在类对象之外，由this指针表示是哪一个对象调用。
this指针在成员函数中隐式调用。
===================================对象指针=====================================





